
buildscript {
	repositories {
		maven { url "https://repo.spring.io/plugins-release" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.1.RELEASE")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'war'

sourceCompatibility = 1.7
targetCompatibility = 1.7
 	
war {
    baseName = 'AgroTransactional'
} 	

repositories {
    mavenCentral()
}

configurations {
	//se excluye para Tomcat8. Comentar cuando se deploya en Tomcat 7
	compile.exclude module: 'log4j-over-slf4j'
    providedRuntime
}

/////////////////////////////////////////////// SOAP - WS
// tag::xsd[]
task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "src/main/resources/spring/files.xsd"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, schema: schema) {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 1.7, target: 1.7, debug: true,
            		includeantruntime: false,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}
// end::xsd[]

task afterEclipseImport {
	dependsOn "genJaxb"
}

// tag::jaxb[]
configurations {
    jaxb
}

//jar {
//    baseName = 'soap-ws-genJaxb'
//    version =  '0.1.0'
//    from genJaxb.classesDir
//}


////////////////////////////////////////////////

dependencies {

			//boot-spring
			compile("org.springframework.boot:spring-boot-starter-web")	
		    
		    //Base de datos
		    compile("org.springframework:spring-jdbc:$springVersion")
		    compile("org.springframework:spring-context-support:$springVersion")
		    compile("org.springframework:spring-orm:$springVersion")
		    compile("org.hibernate:hibernate-core:$hibernateVersion")
		    
		    //Pool de conexiones
		   	compile("org.hibernate:hibernate-c3p0:$hibernateVersion")
		    compile("com.mchange:c3p0:0.9.5.1")	
		    
			//Para el servicio de SOAP - WS
		    compile("org.springframework.boot:spring-boot-starter-ws")	
		    compile("javax.ws.rs:javax.ws.rs-api:2.0.1")
		    compile("wsdl4j:wsdl4j:1.6.1")
		    jaxb("com.sun.xml.bind:jaxb-xjc:2.2.4-1")
		    compile("commons-fileupload:commons-fileupload:1.3.1")
		    compile(files(genJaxb.classesDir).builtBy(genJaxb))
		    
		    //mail
		    compile("org.springframework.boot:spring-boot-starter-mail:1.3.1.RELEASE")
		    
		    //log4j
			compile("log4j:log4j:1.2.17")
		    
		    //Otros
		    compile("net.sf.dozer:dozer:5.5.1")		
		    compile("org.json:json:20090211")    
		    compile("com.google.code.gson:gson:2.2.1")
		    compile("javax.inject:javax.inject:1")
		    compile("javax.servlet:javax.servlet-api:3.1.0")
	   		compile("commons-io:commons-io:2.4")
	   		compile("org.apache.commons:commons-math3:3.5")
	   		compile("commons-beanutils:commons-beanutils:1.9.2")
	   		compile("org.apache.commons:commons-jexl:2.1.1")
		    compile("org.apache.commons:commons-lang3:3.4")
		    compile("org.apache.poi:poi:3.16")
		    compile("org.apache.poi:poi-ooxml:3.16")
	   		//compile("com.googlecode.linkedin-j:linkedin-j-core:1.0.416")
	   		compile("com.google.guava:guava:19.0")   		
	   		compile("com.amazonaws:aws-java-sdk:1.10.43")
	   		compile("org.glassfish.jersey.core:jersey-client:2.22.1")	   		
		    compile fileTree(dir: './localJars', include: '*.jar')
		    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")   
} 

//Si enabled = true,  se crea un archivo WAR con tomcat embebido . Para este caso se crea la carpeta /lib-provided en el WAR
//Si enabled = false, se crea un archivo WAR sin tomcat embebido . Para este caso se elimina la carpeta /lib-provided en el WAR
bootRepackage {
    enabled = false
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}